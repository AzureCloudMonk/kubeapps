// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`when fetching ingresses or services loading spinner matches the snapshot 1`] = `
<LoadingWrapper
  loaded={false}
/>
`;

exports[`when fetching ingresses or services loading spinner matches the snapshot 2`] = `
<LoadingWrapper
  loaded={false}
/>
`;

exports[`when the app contains ingresses should show the table with available ingresses 1`] = `
<AccessURLTable
  getResource={[MockFunction]}
  ingressRefs={Array []}
  ingresses={
    Array [
      Object {
        "isFetching": false,
        "item": Object {
          "kind": "Ingress",
          "metadata": Object {
            "name": "foo",
            "selfLink": "/ingresses/foo",
          },
          "spec": Object {
            "rules": Array [
              Object {
                "host": "foo.bar",
                "http": Object {
                  "paths": Array [
                    Object {
                      "path": "/ready",
                    },
                  ],
                },
              },
            ],
          },
        },
      },
    ]
  }
  services={Array []}
>
  <section
    aria-labelledby="access-urls-title"
  >
    <h5
      className="section-title"
      id="access-urls-title"
    >
      Access URLs
    </h5>
    <Table
      className=""
      columns={
        Array [
          Object {
            "Header": "URL",
            "accessor": "url",
          },
          Object {
            "Header": "Type",
            "accessor": "type",
          },
          Object {
            "Header": "Notes",
            "accessor": "notes",
          },
        ]
      }
      compact={false}
      data={
        Array [
          Object {
            "notes": <span>
              Not associated with any IP.
               
              <Tooltip
                extraSmall={false}
                icon="help"
                iconProps={
                  Object {
                    "size": "sm",
                    "solid": true,
                  }
                }
                id="foo-pending-tooltip"
                label="pending-tooltip"
                large={true}
                position="bottom-left"
                small={false}
              >
                Depending on your cloud provider of choice, it may take some time for an access URL to be available for the application and the Service will stay in a "Pending" state until a URL is assigned. If using Minikube, you will need to run 
                <code>
                  minikube tunnel
                </code>
                 in your terminal in order for an IP address to be assigned to your application.
              </Tooltip>
            </span>,
            "type": "Ingress",
            "url": Array [
              <a
                href="http://foo.bar/ready"
                rel="noopener noreferrer"
                target="_blank"
              >
                http://foo.bar/ready
              </a>,
            ],
          },
        ]
      }
      noBorder={false}
      valign=""
      vertical={false}
    >
      <table
        className="table"
      >
        <thead>
          <tr>
            <th
              className=""
              key="url"
            >
              URL
            </th>
            <th
              className=""
              key="type"
            >
              Type
            </th>
            <th
              className=""
              key="notes"
            >
              Notes
            </th>
          </tr>
        </thead>
        <tbody>
          <TableRow
            columns={
              Array [
                Object {
                  "Header": "URL",
                  "accessor": "url",
                },
                Object {
                  "Header": "Type",
                  "accessor": "type",
                },
                Object {
                  "Header": "Notes",
                  "accessor": "notes",
                },
              ]
            }
            index={0}
            key="0"
            row={
              Object {
                "notes": <span>
                  Not associated with any IP.
                   
                  <Tooltip
                    extraSmall={false}
                    icon="help"
                    iconProps={
                      Object {
                        "size": "sm",
                        "solid": true,
                      }
                    }
                    id="foo-pending-tooltip"
                    label="pending-tooltip"
                    large={true}
                    position="bottom-left"
                    small={false}
                  >
                    Depending on your cloud provider of choice, it may take some time for an access URL to be available for the application and the Service will stay in a "Pending" state until a URL is assigned. If using Minikube, you will need to run 
                    <code>
                      minikube tunnel
                    </code>
                     in your terminal in order for an IP address to be assigned to your application.
                  </Tooltip>
                </span>,
                "type": "Ingress",
                "url": Array [
                  <a
                    href="http://foo.bar/ready"
                    rel="noopener noreferrer"
                    target="_blank"
                  >
                    http://foo.bar/ready
                  </a>,
                ],
              }
            }
          >
            <tr>
              <td
                className=""
                key="0-url"
              >
                <a
                  href="http://foo.bar/ready"
                  key="http://foo.bar/ready"
                  rel="noopener noreferrer"
                  target="_blank"
                >
                  http://foo.bar/ready
                </a>
              </td>
              <td
                className=""
                key="0-type"
              >
                Ingress
              </td>
              <td
                className=""
                key="0-notes"
              >
                <span>
                  Not associated with any IP.
                   
                  <Tooltip
                    extraSmall={false}
                    icon="help"
                    iconProps={
                      Object {
                        "size": "sm",
                        "solid": true,
                      }
                    }
                    id="foo-pending-tooltip"
                    label="pending-tooltip"
                    large={true}
                    position="bottom-left"
                    small={false}
                  >
                    <button
                      aria-describedby="foo-pending-tooltip"
                      aria-expanded={false}
                      aria-haspopup="true"
                      aria-label="pending-tooltip"
                      className="tooltip tooltip-bottom-left tooltip-lg"
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onKeyUp={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      role="tooltip"
                    >
                      <ReactWrapperComponent
                        role="none"
                        shape="help"
                        size="sm"
                        solid={true}
                      >
                        <cds-icon />
                      </ReactWrapperComponent>
                      <span
                        aria-hidden={true}
                        className="tooltip-content"
                        id="foo-pending-tooltip"
                      >
                        Depending on your cloud provider of choice, it may take some time for an access URL to be available for the application and the Service will stay in a "Pending" state until a URL is assigned. If using Minikube, you will need to run 
                        <code>
                          minikube tunnel
                        </code>
                         in your terminal in order for an IP address to be assigned to your application.
                      </span>
                    </button>
                  </Tooltip>
                </span>
              </td>
            </tr>
          </TableRow>
        </tbody>
      </table>
    </Table>
  </section>
</AccessURLTable>
`;

exports[`when the app contains resources with errors displays the error 1`] = `
<AccessURLTable
  getResource={[MockFunction]}
  ingressRefs={Array []}
  ingresses={
    Array [
      Object {
        "error": [Error: could not find Ingress],
        "isFetching": false,
      },
    ]
  }
  services={
    Array [
      Object {
        "error": [Error: could not find Service],
        "isFetching": false,
      },
    ]
  }
>
  <section
    aria-labelledby="access-urls-title"
  >
    <h5
      className="section-title"
      id="access-urls-title"
    >
      Access URLs
    </h5>
    <Table
      className=""
      columns={
        Array [
          Object {
            "Header": "URL",
            "accessor": "url",
          },
          Object {
            "Header": "Type",
            "accessor": "type",
          },
          Object {
            "Header": "Notes",
            "accessor": "notes",
          },
        ]
      }
      compact={false}
      data={
        Array [
          Object {
            "notes": <span>
              Error: 
              could not find Ingress
            </span>,
            "type": "Ingress",
            "url": "Unkown",
          },
        ]
      }
      noBorder={false}
      valign=""
      vertical={false}
    >
      <table
        className="table"
      >
        <thead>
          <tr>
            <th
              className=""
              key="url"
            >
              URL
            </th>
            <th
              className=""
              key="type"
            >
              Type
            </th>
            <th
              className=""
              key="notes"
            >
              Notes
            </th>
          </tr>
        </thead>
        <tbody>
          <TableRow
            columns={
              Array [
                Object {
                  "Header": "URL",
                  "accessor": "url",
                },
                Object {
                  "Header": "Type",
                  "accessor": "type",
                },
                Object {
                  "Header": "Notes",
                  "accessor": "notes",
                },
              ]
            }
            index={0}
            key="0"
            row={
              Object {
                "notes": <span>
                  Error: 
                  could not find Ingress
                </span>,
                "type": "Ingress",
                "url": "Unkown",
              }
            }
          >
            <tr>
              <td
                className=""
                key="0-url"
              >
                Unkown
              </td>
              <td
                className=""
                key="0-type"
              >
                Ingress
              </td>
              <td
                className=""
                key="0-notes"
              >
                <span>
                  Error: 
                  could not find Ingress
                </span>
              </td>
            </tr>
          </TableRow>
        </tbody>
      </table>
    </Table>
  </section>
</AccessURLTable>
`;

exports[`when the app contains services and ingresses should show the table with available svcs and ingresses 1`] = `
<AccessURLTable
  getResource={[MockFunction]}
  ingressRefs={Array []}
  ingresses={
    Array [
      Object {
        "isFetching": false,
        "item": Object {
          "kind": "Ingress",
          "metadata": Object {
            "name": "foo",
            "selfLink": "/ingresses/foo",
          },
          "spec": Object {
            "rules": Array [
              Object {
                "host": "foo.bar",
                "http": Object {
                  "paths": Array [
                    Object {
                      "path": "/ready",
                    },
                  ],
                },
              },
            ],
          },
        },
      },
    ]
  }
  services={
    Array [
      Object {
        "isFetching": false,
        "item": Object {
          "kind": "Service",
          "metadata": Object {
            "name": "foo",
            "selfLink": "/services/foo",
          },
          "spec": Object {
            "ports": Array [
              Object {
                "port": 8080,
              },
            ],
            "type": "LoadBalancer",
          },
          "status": Object {
            "loadBalancer": Object {
              "ingress": Array [
                Object {
                  "ip": "1.2.3.4",
                },
              ],
            },
          },
        },
      },
    ]
  }
>
  <section
    aria-labelledby="access-urls-title"
  >
    <h5
      className="section-title"
      id="access-urls-title"
    >
      Access URLs
    </h5>
    <Table
      className=""
      columns={
        Array [
          Object {
            "Header": "URL",
            "accessor": "url",
          },
          Object {
            "Header": "Type",
            "accessor": "type",
          },
          Object {
            "Header": "Notes",
            "accessor": "notes",
          },
        ]
      }
      compact={false}
      data={
        Array [
          Object {
            "notes": <span>
              IP(s): 
              1.2.3.4
            </span>,
            "type": "Service LoadBalancer",
            "url": Array [
              <a
                href="http://1.2.3.4:8080"
                rel="noopener noreferrer"
                target="_blank"
              >
                http://1.2.3.4:8080
              </a>,
            ],
          },
          Object {
            "notes": <span>
              Not associated with any IP.
               
              <Tooltip
                extraSmall={false}
                icon="help"
                iconProps={
                  Object {
                    "size": "sm",
                    "solid": true,
                  }
                }
                id="foo-pending-tooltip"
                label="pending-tooltip"
                large={true}
                position="bottom-left"
                small={false}
              >
                Depending on your cloud provider of choice, it may take some time for an access URL to be available for the application and the Service will stay in a "Pending" state until a URL is assigned. If using Minikube, you will need to run 
                <code>
                  minikube tunnel
                </code>
                 in your terminal in order for an IP address to be assigned to your application.
              </Tooltip>
            </span>,
            "type": "Ingress",
            "url": Array [
              <a
                href="http://foo.bar/ready"
                rel="noopener noreferrer"
                target="_blank"
              >
                http://foo.bar/ready
              </a>,
            ],
          },
        ]
      }
      noBorder={false}
      valign=""
      vertical={false}
    >
      <table
        className="table"
      >
        <thead>
          <tr>
            <th
              className=""
              key="url"
            >
              URL
            </th>
            <th
              className=""
              key="type"
            >
              Type
            </th>
            <th
              className=""
              key="notes"
            >
              Notes
            </th>
          </tr>
        </thead>
        <tbody>
          <TableRow
            columns={
              Array [
                Object {
                  "Header": "URL",
                  "accessor": "url",
                },
                Object {
                  "Header": "Type",
                  "accessor": "type",
                },
                Object {
                  "Header": "Notes",
                  "accessor": "notes",
                },
              ]
            }
            index={0}
            key="0"
            row={
              Object {
                "notes": <span>
                  IP(s): 
                  1.2.3.4
                </span>,
                "type": "Service LoadBalancer",
                "url": Array [
                  <a
                    href="http://1.2.3.4:8080"
                    rel="noopener noreferrer"
                    target="_blank"
                  >
                    http://1.2.3.4:8080
                  </a>,
                ],
              }
            }
          >
            <tr>
              <td
                className=""
                key="0-url"
              >
                <a
                  href="http://1.2.3.4:8080"
                  key="http://1.2.3.4:8080"
                  rel="noopener noreferrer"
                  target="_blank"
                >
                  http://1.2.3.4:8080
                </a>
              </td>
              <td
                className=""
                key="0-type"
              >
                Service LoadBalancer
              </td>
              <td
                className=""
                key="0-notes"
              >
                <span>
                  IP(s): 
                  1.2.3.4
                </span>
              </td>
            </tr>
          </TableRow>
          <TableRow
            columns={
              Array [
                Object {
                  "Header": "URL",
                  "accessor": "url",
                },
                Object {
                  "Header": "Type",
                  "accessor": "type",
                },
                Object {
                  "Header": "Notes",
                  "accessor": "notes",
                },
              ]
            }
            index={1}
            key="1"
            row={
              Object {
                "notes": <span>
                  Not associated with any IP.
                   
                  <Tooltip
                    extraSmall={false}
                    icon="help"
                    iconProps={
                      Object {
                        "size": "sm",
                        "solid": true,
                      }
                    }
                    id="foo-pending-tooltip"
                    label="pending-tooltip"
                    large={true}
                    position="bottom-left"
                    small={false}
                  >
                    Depending on your cloud provider of choice, it may take some time for an access URL to be available for the application and the Service will stay in a "Pending" state until a URL is assigned. If using Minikube, you will need to run 
                    <code>
                      minikube tunnel
                    </code>
                     in your terminal in order for an IP address to be assigned to your application.
                  </Tooltip>
                </span>,
                "type": "Ingress",
                "url": Array [
                  <a
                    href="http://foo.bar/ready"
                    rel="noopener noreferrer"
                    target="_blank"
                  >
                    http://foo.bar/ready
                  </a>,
                ],
              }
            }
          >
            <tr>
              <td
                className=""
                key="1-url"
              >
                <a
                  href="http://foo.bar/ready"
                  key="http://foo.bar/ready"
                  rel="noopener noreferrer"
                  target="_blank"
                >
                  http://foo.bar/ready
                </a>
              </td>
              <td
                className=""
                key="1-type"
              >
                Ingress
              </td>
              <td
                className=""
                key="1-notes"
              >
                <span>
                  Not associated with any IP.
                   
                  <Tooltip
                    extraSmall={false}
                    icon="help"
                    iconProps={
                      Object {
                        "size": "sm",
                        "solid": true,
                      }
                    }
                    id="foo-pending-tooltip"
                    label="pending-tooltip"
                    large={true}
                    position="bottom-left"
                    small={false}
                  >
                    <button
                      aria-describedby="foo-pending-tooltip"
                      aria-expanded={false}
                      aria-haspopup="true"
                      aria-label="pending-tooltip"
                      className="tooltip tooltip-bottom-left tooltip-lg"
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onKeyUp={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      role="tooltip"
                    >
                      <ReactWrapperComponent
                        role="none"
                        shape="help"
                        size="sm"
                        solid={true}
                      >
                        <cds-icon />
                      </ReactWrapperComponent>
                      <span
                        aria-hidden={true}
                        className="tooltip-content"
                        id="foo-pending-tooltip"
                      >
                        Depending on your cloud provider of choice, it may take some time for an access URL to be available for the application and the Service will stay in a "Pending" state until a URL is assigned. If using Minikube, you will need to run 
                        <code>
                          minikube tunnel
                        </code>
                         in your terminal in order for an IP address to be assigned to your application.
                      </span>
                    </button>
                  </Tooltip>
                </span>
              </td>
            </tr>
          </TableRow>
        </tbody>
      </table>
    </Table>
  </section>
</AccessURLTable>
`;

exports[`when the app contains services should show the table if any service is a LoadBalancer 1`] = `
<section
  aria-labelledby="access-urls-title"
>
  <h5
    className="section-title"
    id="access-urls-title"
  >
    Access URLs
  </h5>
  <Table
    className=""
    columns={
      Array [
        Object {
          "Header": "URL",
          "accessor": "url",
        },
        Object {
          "Header": "Type",
          "accessor": "type",
        },
        Object {
          "Header": "Notes",
          "accessor": "notes",
        },
      ]
    }
    compact={false}
    data={
      Array [
        Object {
          "notes": <span>
            Not associated with any IP.
             
            <Tooltip
              extraSmall={false}
              icon="help"
              iconProps={
                Object {
                  "size": "sm",
                  "solid": true,
                }
              }
              id="foo-pending-tooltip"
              label="pending-tooltip"
              large={true}
              position="bottom-left"
              small={false}
            >
              Depending on your cloud provider of choice, it may take some time for an access URL to be available for the application and the Service will stay in a "Pending" state until a URL is assigned. If using Minikube, you will need to run 
              <code>
                minikube tunnel
              </code>
               in your terminal in order for an IP address to be assigned to your application.
            </Tooltip>
          </span>,
          "type": "Service LoadBalancer",
          "url": "Pending",
        },
      ]
    }
    noBorder={false}
    valign=""
    vertical={false}
  />
</section>
`;
